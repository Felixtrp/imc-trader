import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

# Load data
def load_data(filepath):
    return pd.read_csv(filepath)

# Prepare data
def prepare_data(df):
    """Calculate midprices and prepare features."""
    df['midprice'] = (df['high'] + df['low']) / 2
    # Here you could add more features such as lags of midprice
    df['midprice_lag1'] = df['midprice'].shift(1)
    df.dropna(inplace=True)
    return df

# Train Model
def train_model(X, y):
    model = LinearRegression()
    model.fit(X, y)
    return model

# Predict Function
def predict(model, X):
    return model.predict(X)

# Trading Strategy
def trading_strategy(predictions, threshold=0.05):
    orders = []
    for i in range(1, len(predictions)):
        if predictions[i] > predictions[i-1] * (1 + threshold):  # Predicted increase
            orders.append('buy')
        elif predictions[i] < predictions[i-1] * (1 - threshold):  # Predicted decrease
            orders.append('sell')
        else:
            orders.append('hold')
    return orders

# Main execution block
def main(filepath):
    df = load_data(filepath)
    df = prepare_data(df)

    # Create features and labels
    X = df[['midprice_lag1']].values  # Features
    y = df['midprice'].values  # Labels

    # Split data - here using simple hold-out method
    split = int(0.8 * len(df))
    X_train, X_test = X[:split], X[split:]
    y_train, y_test = y[:split], y[split:]

    # Train and predict
    model = train_model(X_train, y_train)
    predictions = predict(model, X_test)

    # Evaluate
    mae = mean_absolute_error(y_test, predictions)
    print(f"Mean Absolute Error: {mae}")

    # Implement strategy
    orders = trading_strategy(predictions)
    print("Orders:", orders)

if __name__ == "__main__":
    main('path_to_your_data.csv')
